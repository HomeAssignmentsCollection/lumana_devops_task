# name: CI/CD Pipeline
# 
# on:
#   push:
#     branches: [ main, dev, feature/*, bugfix/* ]
#   pull_request:
#     branches: [ main, dev ]
#   workflow_dispatch:
#     inputs:
#       environment:
#         description: 'Environment to deploy to'
#         required: true
#         default: 'staging'
#         type: choice
#         options:
#         - development
#         - staging
#         - production
#       force_deploy:
#         description: 'Force deployment even if tests fail'
#         required: false
#         default: false
#         type: boolean
# 
# env:
#   GO_VERSION: '1.21'
#   NODE_VERSION: '18'
#   PYTHON_VERSION: '3.9'
# 
# jobs:
#   # Тестирование Go приложения
#   test-go:
#     name: Test Go Application
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
# 
#       - name: Setup Go
#         uses: actions/setup-go@v4
#         with:
#           go-version: ${{ env.GO_VERSION }}
# 
#       - name: Cache Go modules
#         uses: actions/cache@v3
#         with:
#           path: |
#             ~/go/pkg/mod
#             ~/.cache/go-build
#           key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
#           restore-keys: |
#             ${{ runner.os }}-go-
# 
#       - name: Install dependencies
#         run: |
#           cd app-go
#           go mod download
# 
#       - name: Run Go tests
#         run: |
#           cd app-go
#           go test -v ./...
# 
#       - name: Build Go application
#         run: |
#           cd app-go
#           go build -o read_products read_products.go
# 
#       - name: Upload Go build artifacts
#         uses: actions/upload-artifact@v3
#         with:
#           name: go-binary
#           path: app-go/read_products
# 
#   # Тестирование Node.js приложения
#   test-node:
#     name: Test Node.js Application
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
# 
#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: ${{ env.NODE_VERSION }}
#           cache: 'npm'
#           cache-dependency-path: app-node/package-lock.json
# 
#       - name: Install dependencies
#         run: |
#           cd app-node
#           npm ci
# 
#       - name: Run Node.js tests
#         run: |
#           cd app-node
#           npm test
#         continue-on-error: true  # Пока тесты не настроены полностью
# 
#       - name: Lint Node.js code
#         run: |
#           cd app-node
#           npm run lint
#         continue-on-error: true
# 
#   # Тестирование Python скриптов
#   test-python:
#     name: Test Python Scripts
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
# 
#       - name: Setup Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: ${{ env.PYTHON_VERSION }}
# 
#       - name: Cache pip dependencies
#         uses: actions/cache@v3
#         with:
#           path: ~/.cache/pip
#           key: ${{ runner.os }}-pip-${{ hashFiles('scripts/requirements.txt') }}
#           restore-keys: |
#             ${{ runner.os }}-pip-
# 
#       - name: Install Python dependencies
#         run: |
#           cd scripts
#           pip install -r requirements.txt
# 
#       - name: Test Python scripts syntax
#         run: |
#           python3 -m py_compile scripts/create_app_user.py
#           python3 -m py_compile scripts/init_mongo_servers.py
#           python3 -m py_compile scripts/check_passwords.py
# 
#       - name: Run password detection test
#         run: |
#           python3 scripts/check_passwords.py app-go/read_products.go
# 
#   # Сборка Docker образов
#   build-docker:
#     name: Build Docker Images
#     runs-on: ubuntu-latest
#     needs: [test-go, test-node, test-python]
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
# 
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3
# 
#       - name: Build Go Docker image
#         run: |
#           docker build -t app-go:latest ./app-go
#           docker images app-go:latest
# 
#       - name: Build Node.js Docker image
#         run: |
#           docker build -t app-node:latest ./app-node
#           docker images app-node:latest
# 
#       - name: Test Docker Compose configuration
#         run: |
#           docker-compose config
# 
#   # Security scanning
#   security-scan:
#     name: Security Scan
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
# 
#       - name: Run Trivy vulnerability scanner
#         uses: aquasecurity/trivy-action@master
#         with:
#           scan-type: 'fs'
#           scan-ref: '.'
#           format: 'sarif'
#           output: 'trivy-results.sarif'
# 
#       - name: Upload Trivy scan results to GitHub Security tab
#         uses: github/codeql-action/upload-sarif@v2
#         if: always()
#         with:
#           sarif_file: 'trivy-results.sarif'
# 
#       - name: Run Bandit security scan
#         run: |
#           pip install bandit
#           bandit -r scripts/ -f json -o bandit-report.json || true
# 
#       - name: Run Go security scan
#         run: |
#           cd app-go
#           go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
#           gosec ./... -fmt json -out gosec-report.json || true
# 
#   # Code quality checks
#   code-quality:
#     name: Code Quality
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
# 
#       - name: Setup Go
#         uses: actions/setup-go@v4
#         with:
#           go-version: ${{ env.GO_VERSION }}
# 
#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: ${{ env.NODE_VERSION }}
# 
#       - name: Setup Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: ${{ env.PYTHON_VERSION }}
# 
#       - name: Go code formatting check
#         run: |
#           cd app-go
#           go fmt ./...
#           if [ -n "$(git status --porcelain)" ]; then
#             echo "Go code is not formatted. Run 'go fmt ./...'"
#             exit 1
#           fi
# 
#       - name: Go linting
#         run: |
#           cd app-go
#           go install golangci-lint/cmd/golangci-lint@latest
#           golangci-lint run ./...
# 
#       - name: Node.js linting
#         run: |
#           cd app-node
#           npm ci
#           npm run lint
#         continue-on-error: true
# 
#       - name: Python linting
#         run: |
#           pip install flake8 black isort
#           black --check scripts/
#           isort --check-only scripts/
#           flake8 scripts/
# 
#   # Deploy (только для main и dev веток)
#   deploy:
#     name: Deploy
#     runs-on: ubuntu-latest
#     needs: [build-docker, security-scan, code-quality]
#     if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || github.event_name == 'workflow_dispatch'
#     environment: ${{ github.event.inputs.environment || 'staging' }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
# 
#       - name: Deploy to environment
#         run: |
#           echo "Deploying to ${{ github.event.inputs.environment || 'staging' }}"
#           echo "Force deploy: ${{ github.event.inputs.force_deploy || 'false' }}"
#           # Здесь будет логика развертывания
#           echo "Deployment completed successfully"
# 
#       - name: Health check
#         run: |
#           echo "Running health checks..."
#           # Здесь будут проверки здоровья приложения
#           echo "Health checks passed" 